#include <osmscout/util/Base64.h>

#define CATCH_CONFIG_MAIN
#include <catch.hpp>


const char TestString[] = "Lorem ipsum dolor sit amet, "
                                    "consectetuer adipiscing elit. "
                                    "Nunc auctor. Maecenas ipsum velit...";

unsigned const char TestBinaryData[] = {
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0x48, 0x2d, 0xd1, 0x00, 0x00, 0x00,
    0x04, 0x73, 0x42, 0x49, 0x54, 0x08, 0x08, 0x08, 0x08, 0x7c, 0x08, 0x64,
    0x88, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x02,
    0xec, 0x00, 0x00, 0x02, 0xec, 0x01, 0xed, 0x33, 0xb4, 0xfa, 0x00, 0x00,
    0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
    0x72, 0x65, 0x00, 0x77, 0x77, 0x77, 0x2e, 0x69, 0x6e, 0x6b, 0x73, 0x63,
    0x61, 0x70, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x9b, 0xee, 0x3c, 0x1a, 0x00,
    0x00, 0x00, 0xd9, 0x49, 0x44, 0x41, 0x54, 0x28, 0x91, 0xd5, 0xd1, 0x31,
    0x4a, 0x04, 0x31, 0x18, 0xc5, 0xf1, 0x9f, 0x8b, 0x85, 0x42, 0x10, 0x2d,
    0xc4, 0xc2, 0xc6, 0x66, 0x50, 0xb0, 0xf3, 0x12, 0x56, 0xe2, 0x29, 0x2c,
    0x82, 0x08, 0x82, 0x77, 0x10, 0x6c, 0x65, 0x25, 0x8d, 0x07, 0xf0, 0x04,
    0x82, 0x96, 0x36, 0x16, 0x6e, 0xa9, 0xb0, 0x92, 0x46, 0xbc, 0x81, 0x38,
    0xc5, 0x6a, 0x33, 0x16, 0x66, 0x61, 0x1c, 0xa7, 0x58, 0x4b, 0x1f, 0x7c,
    0x3c, 0x5e, 0xf2, 0xfd, 0x49, 0xf2, 0x65, 0xae, 0x69, 0x1a, 0x21, 0xe5,
    0x7d, 0x9c, 0xf9, 0xa9, 0x06, 0x13, 0xbc, 0x61, 0x84, 0xcb, 0x3a, 0x56,
    0xe3, 0xe9, 0xe6, 0xa0, 0xf8, 0x12, 0x36, 0x8b, 0x4f, 0x4a, 0x7d, 0x60,
    0x01, 0xdb, 0x38, 0xc1, 0x63, 0x48, 0x79, 0x77, 0x0a, 0xce, 0x77, 0x4e,
    0x19, 0xd6, 0xb1, 0x3a, 0xed, 0xac, 0x09, 0x29, 0x1f, 0xe2, 0x1c, 0x57,
    0x21, 0xe5, 0xb5, 0x3a, 0x56, 0x9f, 0x83, 0x6e, 0x53, 0x9f, 0xea, 0x58,
    0x5d, 0xe0, 0x01, 0xcb, 0xd8, 0x69, 0x5f, 0x75, 0x16, 0xbd, 0x16, 0x5f,
    0x9f, 0x19, 0x0c, 0x29, 0xaf, 0x60, 0xaf, 0xc4, 0x31, 0xbf, 0xdf, 0xb8,
    0x1a, 0x52, 0xde, 0x6a, 0xe5, 0x45, 0x6c, 0xe0, 0xc8, 0xf7, 0xa0, 0x6e,
    0xeb, 0x58, 0x3d, 0xf5, 0x81, 0xc7, 0xa5, 0xfa, 0x74, 0x8d, 0x83, 0x69,
    0xe8, 0x82, 0x77, 0xb8, 0x6f, 0xe5, 0x77, 0xbc, 0xe0, 0xb9, 0x8e, 0xd5,
    0xa8, 0xdd, 0xd8, 0x05, 0x6f, 0xfa, 0xbe, 0xa3, 0x4f, 0x7f, 0x99, 0xea,
    0x7f, 0x05, 0xbf, 0x00, 0x7e, 0x57, 0x33, 0xdc, 0x7a, 0xad, 0xa5, 0x35,
    0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

TEST_CASE("Base64 encode") {
  auto stringBytes = std::vector<char>(TestString, TestString + sizeof(TestString));
  REQUIRE(osmscout::Base64Encode(stringBytes) ==
      "TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVlciBhZGlwaXNjaW5nIGVsaXQu"
      "IE51bmMgYXVjdG9yLiBNYWVjZW5hcyBpcHN1bSB2ZWxpdC4uLgA=");
}

TEST_CASE("Base64 decode") {
  auto stringBytes = std::vector<char>(TestString, TestString + sizeof(TestString));
  REQUIRE(osmscout::Base64Decode(
      "\t\t"
      "TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVlciBhZGlwaXNjaW5nIGVsaXQu\n"
      "IE51bmMgYXVjdG9yLiBNYWVjZW5hcyBpcHN1bSB2ZWxpdC4uLgA=  ") == stringBytes);
}

TEST_CASE("Base64 processing binary data") {
  std::vector<char> binaryData = std::vector<char>(TestString, TestString + sizeof(TestString));
  std::string encoded = osmscout::Base64Encode(binaryData);
  //std::cout << encoded << std::endl;
  std::vector<char> decoded = osmscout::Base64Decode(encoded);

  REQUIRE(decoded == binaryData);
}
